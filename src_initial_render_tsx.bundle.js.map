{"version":3,"file":"src_initial_render_tsx.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;AAA0B;AACO;AAC6B;AACL;AACC;AACM;AACC;AACjE,0EAAW,CAAC,0EAAW,EAAE,2EAAU,CAAC,CAAC;AAEtB,SAAS,aAAa,CAAC,WAAW,EAAE,WAAW;IAC1D,MAAM,EACJ,KAAK,EACL,cAAc,GAAG,IAAI,EACrB,aAAa,EACb,YAAY,EACZ,gBAAgB,EACjB,GAAG,WAAW,CAAC;IAEhB,IAAI,MAAM,GAAQ,IAAI,CAAC;IAEvB,IAAI,cAAc,EAAE;QAClB,MAAM,GAAG,QAAQ,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC;KAClD;SAAM,IAAI,YAAY,EAAE;QACvB,MAAM,GAAG,YAAY,CAAC;KACvB;SAAM,IAAI,WAAW,EAAE;QACtB,MAAM,GAAG,QAAQ,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;KAC/C;IAED,MAAM,SAAS,GAAQ,CAAC,SAAS,EAAE,EAAE;QACnC,MAAM,cAAc,GAAG,kEAAuB,EAAE,CAAC;QAEjD,MAAM,WAAW,GAAG,iDAAC,cAAc,oBAAK,SAAS,EAAI,CAAC;QAEtD,qFAAqF;QACrF,kEAAkE;QAClE,MAAM,OAAO,GACX,iDAAC,6EAAqB,IAAC,KAAK,EAAE,EAAE,KAAK,EAAE,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,EAAE,aAAa,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,IAClG,WAAW,CACU,CAAC;QAE3B,OAAO,OAAO,CAAC;IACjB,CAAC,CAAC;IAEF,IAAI,aAAa,EAAE;QACjB,SAAS,CAAC,WAAW,GAAG,aAAa,CAAC;KACvC;IAED,MAAM,YAAY,GAAG,CACjB,iDAAC,SAAS,oBACJ,KAAK,IACT,YAAY,EAAE,YAAY,EAC1B,gBAAgB,EAAE,gBAAgB,IAClC,CACL,CAAC;IAEF,iDAAM,CACJ,iDAAC,2CAAc,QACZ,YAAY,CACE,EACjB,MAAM,CACP;AACH,CAAC","sources":["webpack://react-sdk/./src/initial_render.tsx"],"sourcesContent":["import React from 'react';\nimport {render} from 'react-dom';\nimport createPConnectComponent from './bridge/react_pconnect';\nimport StoreContext from \"./bridge/Context/StoreContext\";\nimport {library} from '@fortawesome/fontawesome-svg-core';\nimport { faAngleDown } from '@fortawesome/free-solid-svg-icons';\nimport { faEnvelope } from '@fortawesome/free-regular-svg-icons';\nlibrary.add(faAngleDown, faEnvelope);\n\nexport default function initialRender(inRenderObj, containerId) {\n    const {\n      props,\n      domContainerID = null,\n      componentName,\n      portalTarget,\n      styleSheetTarget\n    } = inRenderObj;\n  \n    let target: any = null;\n  \n    if (domContainerID) {\n      target = document.getElementById(domContainerID);\n    } else if (portalTarget) {\n      target = portalTarget;\n    } else if (containerId) {\n      target = document.getElementById(containerId);\n    }\n  \n    const Component: any = (rootProps) => {\n      const PegaConnectObj = createPConnectComponent();\n  \n      const thePConnObj = <PegaConnectObj {...rootProps} />;\n  \n      // NOTE: For Embedded mode, we add in displayOnlyFA and isMashup to our React context\n      //  so the values are available to any component that may need it.\n      const theComp =\n        <StoreContext.Provider value={{ store: window.PCore.getStore(), displayOnlyFA: true, isMashup: true }} >\n          {thePConnObj}\n        </StoreContext.Provider>;\n  \n      return theComp;\n    };\n  \n    if (componentName) {\n      Component.displayName = componentName;\n    }\n  \n    const theComponent = (\n        <Component\n          {...props}\n          portalTarget={portalTarget}\n          styleSheetTarget={styleSheetTarget}\n        />\n    );\n  \n    render(\n      <React.Fragment>\n        {theComponent}\n      </React.Fragment>,\n      target\n    )\n  }\n  "],"names":[],"sourceRoot":""}